require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe EventsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Event. As you add validations to Event, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    FactoryGirl.attributes_for(:event)
  end

  let(:invalid_attributes) do
    {
      title: "",
      url: "",
      location: "",
      start: nil
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # EventsController. Be sure to keep this updated too.
  let(:valid_session) do
    {
      admin: true
    }
  end

  describe "GET index" do
    it "assigns all events as @events_by_date" do
      event = Event.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:events_by_date)).to eq(event.start.to_date => [event])
    end
  end

  describe "GET edit" do
    it "assigns the requested event as @event" do
      event = Event.create! valid_attributes
      get :edit, { id: event.to_param }, valid_session
      expect(assigns(:event)).to eq(event)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Event" do
        expect do
          post :create, { event: valid_attributes }, valid_session
        end.to change(Event, :count).by(1)
      end

      it "assigns a newly created event as @event" do
        post :create, { event: valid_attributes }, valid_session
        expect(assigns(:event)).to be_a(Event)
        expect(assigns(:event)).to be_persisted
      end

      it "redirects to the created event" do
        post :create, { event: valid_attributes }, valid_session
        expect(response).to redirect_to(root_url)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved event as @event" do
        post :create, { event: invalid_attributes }, valid_session
        expect(assigns(:event)).to be_a_new(Event)
      end

      it "redirects to 'edit' template with this invalid event" do
        post :create, { event: invalid_attributes }, valid_session
        expect(response).to render_template "edit"
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) do
        {
          title: "This is a new title",
          url: "http://example.com/new",
          location: "This is a new location",
          start: DateTime.parse("2014-08-17 12:00PM EDT")
        }
      end

      it "updates the requested event" do
        event = Event.create! valid_attributes
        put :update,
            { id: event.to_param, event: new_attributes },
            valid_session
        event.reload
        expect(assigns(:event).title).to eq(new_attributes[:title])
        expect(assigns(:event).url).to eq(new_attributes[:url])
        expect(assigns(:event).location).to eq(new_attributes[:location])
        expect(assigns(:event).start).to eq(new_attributes[:start])
      end

      it "assigns the requested event as @event" do
        event = Event.create! valid_attributes
        put :update,
            { id: event.to_param, event: valid_attributes },
            valid_session
        expect(assigns(:event)).to eq(event)
      end

      it "redirects to the events index" do
        event = Event.create! valid_attributes
        put :update,
            { id: event.to_param, event: valid_attributes },
            valid_session
        expect(response).to redirect_to(root_url)
      end
    end

    describe "with invalid params" do
      it "assigns the event as @event" do
        event = Event.create! valid_attributes
        put :update,
            { id: event.to_param, event: invalid_attributes },
            valid_session
        expect(assigns(:event)).to eq(event)
      end

      it "re-renders the 'edit' template" do
        event = Event.create! valid_attributes
        put :update,
            { id: event.to_param, event: invalid_attributes },
            valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested event" do
      event = Event.create! valid_attributes
      expect do
        delete :destroy, { id: event.to_param }, valid_session
      end.to change(Event, :count).by(-1)
    end

    it "redirects to the events list" do
      event = Event.create! valid_attributes
      delete :destroy, { id: event.to_param }, valid_session
      expect(response).to redirect_to(root_url)
    end
  end

end
